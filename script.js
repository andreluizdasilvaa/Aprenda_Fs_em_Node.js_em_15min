// Assim que importa o modulo fs
const fs = require('fs')

// ass√≠ncrono: N√ÉO bloqueiam a execu√ß√£o do c√≥digo. Eles utilizam callbacks ou Promises para lidar com os resultados, permitindo que outras opera√ß√µes aconte√ßam enquanto esperam pela conclus√£o.
// s√≠ncrono: bloqueiam a execu√ß√£o do c√≥digo at√© que a opera√ß√£o seja conclu√≠da, ou seja, o c√≥digo s√≥ avan√ßa quando a opera√ß√£o termina.


// ===========================
// --| Leitura de Arquivos |--
// ===========================

// M√©todo ass√≠ncrono
fs.readFile('paraLer.txt', 'utf-8', (err, data) => {
    // Se ocorrer um erro ao ler o arquivo, ele √© passado para o callback e podemos trat√°-lo aqui.
    if(err) {
        console.error('Erro ao ler o arquivo.', err);
        return;
    }
    // Caso contr√°rio, o conte√∫do do arquivo √© exibido no console.
    console.log('Conte√∫do do arquivo:', data);
})

// M√©todo s√≠ncrono
// A leitura s√≠ncrona bloqueia o c√≥digo at√© que a leitura do arquivo seja conclu√≠da.
const data = fs.readFileSync('paraLer.txt', 'utf-8');
console.log('Conte√∫do do arquivo:', data);


// ===========================
// --| Escrita em Arquivos |--
// ===========================

// M√©todo ass√≠ncrono
// O m√©todo writeFile apaga o conte√∫do do arquivo e escreve o novo texto.
fs.writeFile('paraEscrever.txt', 'Este √© o texto dentro do arquivo agora', (err) => {
    if(err) {
        console.error('Erro ao escrever no arquivo', err);
        return;
    };
    // Caso n√£o haja erro, confirma que o arquivo foi escrito com sucesso.
    console.log('Arquivo escrito com sucesso');
});

// M√©todo s√≠ncrono
// O m√©todo writeFileSync tamb√©m escreve no arquivo, mas de forma s√≠ncrona, ou seja, o c√≥digo aguarda a conclus√£o da opera√ß√£o para seguir.
const data2 = fs.writeFileSync('paraEscrever.txt', 'Este √© o texto escrito de maneira s√≠ncrona');
console.log('Arquivo escrito com sucesso', data2);


// ================================================
// --| Adicionar conte√∫do a um arquivo (Append) |--
// ================================================

// O m√©todo appendFile adiciona um conte√∫do ao final do arquivo sem sobrescrever o que j√° est√° l√°.
fs.appendFile('paraEscrever.txt', '\nNova linha adicionada', (err) => {
    if(err) throw err
    // Se n√£o ocorrer erro, a adi√ß√£o de conte√∫do foi bem-sucedida.
    console.log('Conte√∫do adicionado com sucesso!');
})


// ========================
// --| Excluir Arquivos |--
// ========================

// O m√©todo unlink remove o arquivo especificado. Se o arquivo n√£o existir ou houver outro erro, ele ser√° passado para o callback.
fs.unlink('arquivoParaExcluir.txt', (err) => {
    if(err) throw err;
    // Caso o arquivo seja exclu√≠do com sucesso, uma mensagem √© exibida.
    console.log('Arquivo exclu√≠do!');
})


// ===============================
// --| Criar Diret√≥rios(Pasta) |--
// ===============================

// O m√©todo mkdir cria um diret√≥rio de forma ass√≠ncrona. Se o diret√≥rio j√° existir ou ocorrer algum erro, o erro √© passado para o callback.
fs.mkdir('MeuDiretorio', (err) => {
    if(err) throw err;
    // Se n√£o houver erro, o diret√≥rio foi criado com sucesso.
    console.log('Diret√≥rio criado com sucesso!');
});

// M√©todo s√≠ncrono
// O m√©todo mkdirSync cria o diret√≥rio, mas o c√≥digo s√≥ avan√ßa quando a opera√ß√£o for completada.
fs.mkdirSync('OutroDiretorio');
console.log('Outro Diret√≥rio criado!');


// ==========================
// --| Remover Diret√≥rios |--
// ==========================

// O m√©todo rmdir remove um diret√≥rio, mas somente se ele estiver vazio. Caso contr√°rio, um erro ser√° lan√ßado.
fs.rmdir('MeuDiretorio', (err) => {
    if(err) throw err;
    // Se o diret√≥rio for removido com sucesso, uma mensagem ser√° exibida.
    console.log('Diret√≥rio removido com sucesso!');
})


// =======================================
// --| Renomear Arquivos ou Diret√≥rios |--
// =======================================

// O m√©todo rename permite alterar o nome de um arquivo ou diret√≥rio.
fs.rename('paraRenomear.txt', 'script2.js', (err) => {
    if(err) throw err;
    // Caso n√£o haja erro, o arquivo foi renomeado com sucesso.
    console.log('Arquivo renomeado!');
})


// ===============================================
// --| Verificar se um Arquivo/Diret√≥rio Existe |--
// ================================================

// O m√©todo existsSync retorna um valor booleano, indicando se o arquivo ou diret√≥rio existe ou n√£o.
console.log(fs.existsSync('paraLer.txt')) // true (se existe), false (se n√£o existe)

// Usando o m√©todo existsSync para verificar a exist√™ncia do arquivo 'paraLer.txt'.
if (fs.existsSync('paraLer.txt')) {
    console.log('O arquivo existe!');
} else {
    console.log('O arquivo n√£o existe!');
}


// ====================================
// --| Ler Conte√∫do de um Diret√≥rio |--
// ====================================

// O m√©todo readdir l√™ o conte√∫do de um diret√≥rio e retorna um array com os nomes de arquivos e subdiret√≥rios.
fs.readdir('.', (err, files) => {
    if(err) throw err;
    // Exibe o conte√∫do do diret√≥rio atual (todos os arquivos e pastas).
    console.log('Arquivos no diret√≥rio: ', files);
});


// ===============================================
// --| Obter Informa√ß√µes de um Arquivo (Stats) |--
// ===============================================

// O m√©todo stat retorna v√°rias informa√ß√µes sobre o arquivo ou diret√≥rio, como o tamanho, tipo, permiss√µes, etc.
fs.stat('paraLer.txt', (err, stats) => {
    if(err) throw err;
    // Exibe o objeto stats, que cont√©m informa√ß√µes detalhadas sobre o arquivo.
    console.log(stats);
})


// EXERC√çCIOS DE FIXA√á√ÉO!!! (fa√ßa em um diret√≥rio separado)

/*
    1Ô∏è‚É£ Crie um arquivo chamado **"meuArquivo.txt"** e escreva a frase: `"Este √© um arquivo de teste"` nele.

    2Ô∏è‚É£ Leia e exiba no console o conte√∫do do **"meuArquivo.txt"**.

    3Ô∏è‚É£ Adicione a frase `"Nova linha adicionada!"` ao arquivo **"meuArquivo.txt"**.

    4Ô∏è‚É£ Renomeie **"meuArquivo.txt"** para **"arquivoRenomeado.txt"**.

    5Ô∏è‚É£ Verifique se o arquivo **"arquivoRenomeado.txt"** existe e exiba uma mensagem apropriada.

    6Ô∏è‚É£ Exclua o arquivo **"arquivoRenomeado.txt"**.

    7Ô∏è‚É£ Crie um diret√≥rio chamado **"meuDiretorio"**.

    8Ô∏è‚É£ Dentro de **"meuDiretorio"**, crie um arquivo chamado **"teste.txt"** com o conte√∫do `"Arquivo dentro do diret√≥rio"`.

    9Ô∏è‚É£ Liste todos os arquivos e pastas dentro do diret√≥rio **"meuDiretorio"**.

    üîü Exclua o arquivo **"teste.txt"** e depois remova o diret√≥rio **"meuDiretorio"**.

‚úîÔ∏è Dica: Fa√ßa tudo utilizando os m√©todos ass√≠ncronos para n√£o travar a execu√ß√£o do c√≥digo! üöÄ
*/